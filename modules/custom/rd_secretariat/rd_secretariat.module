<?php

// *******************************************************************************************
//     PERMISSIONS
// *******************************************************************************************

/**
 * Implements hook_permission().
 */
function rd_secretariat_permission() {
  return array(
    t('access secretariat actions') => array(
      'title' => t('access secretariat actions'),
      'description' => t('Allow access to the secretariat actions'),
    ),
  );
}

// *******************************************************************************************
//     MENU
// *******************************************************************************************

/**
 * Implements hook_menu().
 */
function rd_secretariat_menu() {
  // SECRETARY
  $items['admin/secretaria'] = array(
    'title' => t('Secretariat'),
    'access arguments' => array('access secretariat actions'),
    //'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  // 1 - Patients
  $items['admin/secretaria/pacientes'] = array(
    'title' => t('Patients'),
    'description' => t('Import or Create Patients'),
    'access arguments' => array('access secretariat actions'),
    //'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_sec_import_patients_form'),
    'access arguments' => array('access secretariat actions'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2,
  );
  $items['admin/secretaria/pacientes/importar'] = array(
    'title' => t('Import'),
    'description' => t('Import or update Patients using an Excel file'),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/secretaria/pacientes/crear'] = array(
    'title' => t('Create'),
    'description' => t('Create a Patient with its minimum details'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_sec_create_patients_form'),
    'access arguments' => array('access secretariat actions'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  // 2 - Practitioners
  // Manage by Views

  // 3 - Access Keys
  $items['admin/secretaria/clave_accesso'] = array(
    'title' => t('Access Keys'),
    'description' => t('Create Access Keys'),
    //'access arguments' => array('access secretariat actions'),
    //'menu_name' => 'main-menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_sec_create_access_key_form'),
    'access arguments' => array('access secretariat actions'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );
  $items['admin/secretaria/clave_accesso/crear'] = array(
    'title' => t('Create'),
    'description' => t('Create Access Keys'),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/secretaria/clave_accesso/enlazar'] = array(
    'title' => t('Link'),
    'description' => t('Link Access Key with Patients and Practitioners'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_sec_link_access_key_form'),
    'access arguments' => array('access secretariat actions'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/secretaria/clave_accesso/borrar'] = array(
    'title' => t('Delete'),
    'description' => t('Delete Access Key for Patients and Practitioners'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_sec_delete_access_key_form'),
    'access arguments' => array('access secretariat actions'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// PATIENTS

/**
* Page callback for Import Patients Form
*/
function rd_sec_import_patients_form($form, &$form_state) {

  $form['import'] = array(
    '#title' => t('CSV File'),
    '#type' => 'managed_file',
    '#description' => t('Choose the field and then click on Upload button. The uploaded csv will be imported and temporarily saved.'),
    '#upload_location' => 'public://secretaria/importar_pacientes/',
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv'),
    ),
    '#required' => true,
  );

  $form['access_keys'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Access Key'),
    '#options' => _get_vocabulary_terms('rd_voc_access_key'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

function rd_sec_import_patients_form_submit($form, &$form_state) {
  // Check to make sure that the file was uploaded to the server properly
  $uri = db_query("SELECT uri FROM {file_managed} WHERE fid = :fid", array(
    ':fid' => $form_state['input']['import']['fid'],
  ))->fetchField();
  if(!empty($uri)) {
    if(file_exists(drupal_realpath($uri))) {
      // Open the csv
      $handle = fopen(drupal_realpath($uri), "r");
      // Go through each row in the csv and run a function on it. In this case we are parsing by ',' (comma) characters.
      // If you want commas are any other character, replace the comma with it.
      while (($data = fgetcsv($handle, 0, ',', '"')) !== FALSE) {
        $operations[] = array(
          'rd_sec_import_batch_processing',  // The function to run on each row
          array($data),  // The row in the csv
        );
      }

      // Once everything is gathered and ready to be processed... well... process it!
      $batch = array(
        'title' => t('Importing CSV...'),
        'operations' => $operations,  // Runs all of the queued processes from the while loop above.
        'finished' => 'rd_sec_import_finished', // Function to run when the import is successful
        'error_message' => t('The installation has encountered an error.'),
        'progress_message' => t('Imported @current of @total products.'),
      );
      batch_set($batch);
      fclose($handle);
    }
  }
  else {
    drupal_set_message(t('There was an error uploading your file. Try it again or contact a System administator.'), 'error');
  }
}

/**
 * This function runs the batch processing and creates nodes with then given information
 */
function rd_sec_import_batch_processing($data) {
  // $patient_name = $data[xxxxxx];
  // $patient_first_surename = $data[xxxxxx];
  // $patient_second_surename = $data[xxxxxx];
  // $patient_ =  $data[xxxxxx];

  // Lets make the variables more readable.
  $form_state['values']['excel_number'] = $data[0];
  $form_state['values']['name'] = $data[3];
  $form_state['values']['first_surename'] = $data[1];
  $form_state['values']['second_surename'] = $data[2];
  // $body = $data[1];
  // $serial_num = $data[2];
  // // Find out if the node already exists by looking up its serial number. Each serial number should be unique. You can use whatever you want.
  // $nid = db_query("SELECT DISTINCT n.nid FROM {node} n " .
  //   "INNER JOIN {field_data_field_serial_number} s ON s.revision_id = n.vid AND s.entity_id = n.nid " .
  //   "WHERE field_serial_number_value = :serial", array(
  //     ':serial' => $serial_num,
  //   ))->fetchField();
  // if(!empty($nid)) {
  //   // The node exists! Load it.
  //   $node = node_load($nid);

  //   // Change the values. No need to update the serial number though.
  //   $node->title = $title;
  //   $node->body['und'][0]['value'] = $body;
  //   $node->body['und'][0]['safe_value'] = check_plain($body);
  //   node_save($node);
  // }
  // else {
  //   // The node does not exist! Create it.
  //   global $user;
  //   $node = new StdClass();
  //   $node->type = 'page'; // Choose your type
  //   $node->status = 1; // Sets to published automatically, 0 will be unpublished
  //   $node->title = $title;
  //   $node->uid = $user->uid;
  //   $node->body['und'][0]['value'] = $body;
  //   $node->body['und'][0]['safe_value'] = check_plain($body);
  //   $node->language = 'und';

  //   $node->field_serial_number['und'][0]['value'] = $serial_num;
  //   $node->field_serial_number['und'][0]['safe_value'] = check_plain($serial_num);
  //   node_save($node);
  // }

  global $user;

  $node = new stdClass();
  $node->title = !empty($form_state['values']['second_surename']) ? strtoupper($form_state['values']['first_surename']) . ' ' . strtoupper($form_state['values']['second_surename']) . ', ' . ucfirst($form_state['values']['name']) : strtoupper($form_state['values']['first_surename'])  . ', ' . ucfirst($form_state['values']['name']);
  $node->type = 'rd_ct_patient';
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->rd_f_patient_name['und'][0]['value'] = $form_state['values']['name'];
  $node->rd_f_patient_first_surname['und'][0]['value'] = $form_state['values']['first_surename'];
  if(isset($form_state['values']['second_surename'])) $node->rd_f_patient_second_surname['und'][0]['value'] = $form_state['values']['second_surename'];
  $node->rd_f_patient_excel_number['und'][0]['value'] = $form_state['values']['excel_number'];
  // include access key ALL
  // $key_all_terms = _get_vocabulary_terms('rd_voc_access_key');;
  // $key_all_terms = array_keys($key_all_terms);
  // $key_all_terms = reset($key_all_terms);
  // $form_state['values']['access_keys'][$key_all_terms] = $key_all_terms;
  // foreach($form_state['values']['access_keys'] as $key => $tid){
  //   if($tid != 0) $node->rd_f_access_key['und'][] = array('tid' => $tid);
  // }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);


}


/**
 * This function runs when the batch processing is complete
 */
function rd_sec_import_finished() {
  drupal_set_message(t('Import Completed Successfully'));
}


















/**
* Page callback for Create Patients Form
*/
function rd_sec_create_patients_form($form, &$form_state) {

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => true,
  );

  $form['first_surename'] = array(
    '#type' => 'textfield',
    '#title' => t('First Surename'),
    '#required' => true,
  );

  $form['second_surename'] = array(
    '#type' => 'textfield',
    '#title' => t('Second Surename'),
  );

  $form['excel_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Patient Number (Excel)'),
    '#required' => true,
  );
  // create default value array for access_keys
  // $access_keys = _get_vocabulary_terms('rd_voc_access_key');
  // foreach ($access_keys as $key => $value) {
  //   $default_values_access_keys[$key] = 0;
  // }
  // $key_all_terms = array_keys($access_keys);
  // $key_all_terms = reset($key_all_terms);
  // $default_values_access_keys[$key_all_terms] = $key_all_terms;
  $form['access_keys'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Access Key'),
    '#options' => _get_vocabulary_terms('rd_voc_access_key'),
    //'#default_value' => $default_values_access_keys,
    '#required' => true,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}

function rd_sec_create_patients_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['excel_number'])) form_set_error('excel_number', t('Patient Number is not a number'));
  dpm($form_state);
}

function rd_sec_create_patients_form_submit($form, &$form_state) {
  global $user;

  $node = new stdClass();
  $node->title = !empty($form_state['values']['second_surename']) ? strtoupper($form_state['values']['first_surename']) . ' ' . strtoupper($form_state['values']['second_surename']) . ', ' . ucfirst($form_state['values']['name']) : strtoupper($form_state['values']['first_surename'])  . ', ' . ucfirst($form_state['values']['name']);
  $node->type = 'rd_ct_patient';
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->rd_f_patient_name['und'][0]['value'] = $form_state['values']['name'];
  $node->rd_f_patient_first_surname['und'][0]['value'] = $form_state['values']['first_surename'];
  if(isset($form_state['values']['second_surename'])) $node->rd_f_patient_second_surname['und'][0]['value'] = $form_state['values']['second_surename'];
  $node->rd_f_patient_excel_number['und'][0]['value'] = $form_state['values']['excel_number'];
  // include access key ALL
  $key_all_terms = _get_vocabulary_terms('rd_voc_access_key');;
  $key_all_terms = array_keys($key_all_terms);
  $key_all_terms = reset($key_all_terms);
  $form_state['values']['access_keys'][$key_all_terms] = $key_all_terms;
  foreach($form_state['values']['access_keys'] as $key => $tid){
    if($tid != 0) $node->rd_f_access_key['und'][] = array('tid' => $tid);
  }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  //$form_state['redirect']  = 'SOME WHERE';

  drupal_set_message(t('Patient has been created : ' . $node->title));
}

// ACCESS KEYS


/**
* Page callback for Insert Access Key Form
*/
function rd_sec_create_access_key_form($form, &$form_state) {

  $form['access_keys'] = array(
    '#type' => 'textarea',
    '#title' => t('Access Keys'),
    '#description' => t('IMP: Enter one value per line'),
    '#required' => true,
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Insert'),
  );

  return $form;
}

function rd_sec_create_access_key_form_submit($form, &$form_state) {
  $access_keys = explode("\r", $form_state['values']['access_keys']);
  foreach ($access_keys as $key => $access_key) {
    _add_taxonomy_term($access_key, 'rd_voc_access_key');
  }
  drupal_set_message('Access Keys created');
}


/**
* Page callback for Link Access Key Form
*/
function rd_sec_link_access_key_form($form, &$form_state) {
  $access_keys = _get_vocabulary_terms('rd_voc_access_key');
  unset($access_keys[current(array_keys($access_keys))]); //remove the first element of the list: "0 - All"
  $form['access_key'] = array(
    '#type' => 'select',
    '#title' => t('Access Keys'),
    '#description' => t('Select the Access Key to link'),
    '#options' => $access_keys,
    '#required' => true,
    );
  $form['practitioners'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Practitioners'),
    '#description' => t('Select Practitioners whom you want to add the Access Key'),
    '#options' => _find_users_by_role('Practicing'),
    '#required' => true,
    );
  $form['patient_numbers'] = array(
    '#type' => 'textarea',
    '#title' => t('Patient Numbers'),
    '#description' => t('IMP: Enter one value per line. You can have blank values between lines'),
    '#required' => true,
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Insert'),
  );

  return $form;
}

// function rd_sec_link_access_key_form_validate($form, &$form_state) {
//   // check that file is csv format
//   // TO DO
//   dpm($form_state);
//   $patient_numbers = explode("\r", $form_state['values']['patient_numbers']);
//   foreach ($patient_numbers as $key => $patient_number) {
//     if(is_numeric($patient_number)){
//       dpm($patient_number);
//     }
//   }
//   drupal_set_message('validation done');
//   return false;
// }

function rd_sec_link_access_key_form_submit($form, &$form_state) {
  // Access Key taxonomy id
  $tid = $form_state['values']['access_key'];

  // Attach Access Key to Users
  foreach ($form_state['values']['practitioners'] as $uid => $value) {
    if( $value != 0){
      $user = user_load($uid);
      if(isset($user->rd_f_access_key['und'][0])){
        //verify the key is not already linked
        $key_exists = false;
        foreach ($user->rd_f_access_key['und'] as $key_user => $value) {
          if($value['tid'] == $tid) $key_exists = true;
        }
        if(!$key_exists) $user->rd_f_access_key['und'][]['tid'] = $tid;
      }
      else {
        $user->rd_f_access_key['und'][0]['tid'] = $tid;
      }
      user_save($user);
    }
  }

  // Attach Access Key to Patients
  $patient_numbers_list = explode("\r", $form_state['values']['patient_numbers']);
  $patient_numbers = array();
  foreach ($patient_numbers_list as $key => $patient_number) {
    if(is_numeric($patient_number)) $patient_numbers[] = $patient_number;
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'rd_ct_patient')
    ->fieldCondition('rd_f_patient_excel_number', 'value', $patient_numbers, 'IN')
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
  $result = $query->execute();

  if (!empty($result['node'])) {
    foreach (array_keys($result['node']) as $key_result => $nid) {
      $patient_node = node_load($nid);
      if(isset($patient_node->rd_f_access_key['und'][0])){
        $patient_node->rd_f_access_key['und'][]['tid'] = $tid;
      }
      else {
        $patient_node->rd_f_access_key['und'][0]['tid'] = $tid;
      }
      node_save($patient_node);
    }
  }
  drupal_set_message('Access Key linked');
}



/**
* Page callback for Delete Access Key Form
*/
function rd_sec_delete_access_key_form($form, &$form_state) {
  $access_keys = _get_vocabulary_terms('rd_voc_access_key');
  unset($access_keys[current(array_keys($access_keys))]); //remove the first element of the list: "0 - All"
  $form['access_keys'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Access Keys'),
    '#description' => t('Select the Access Keys to delete'),
    '#options' => $access_keys,
    '#required' => true,
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  return $form;
}

function rd_sec_delete_access_key_form_submit($form, &$form_state) {
  foreach($form_state['values']['access_keys'] as $array_key => $tid){

    // Remve Access Keys within Users
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user')
      ->entityCondition('bundle', 'user')
      ->fieldCondition('rd_f_access_key', 'tid', $tid, '=')
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
    $result = $query->execute();

    if (!empty($result['user'])) {
      foreach (array_keys($result['user']) as $key_result => $nid) {
        $user = user_load($nid);
        foreach ($user->rd_f_access_key['und'] as $key_user => $value) {
          if($value['tid'] == $tid) unset($user->rd_f_access_key['und'][$key_user]);
        }
        sort($user->rd_f_access_key['und']);
        user_save($user);
      }
    }

    // Remve Access Keys within Patients
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'rd_ct_patient')
      ->fieldCondition('rd_f_access_key', 'tid', $tid, '=')
      ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
    $result = $query->execute();

    if (!empty($result['node'])) {
      foreach (array_keys($result['node']) as $key_result => $nid) {
        $node = node_load($nid);
        foreach ($node->rd_f_access_key['und'] as $key_node => $value) {
          if($value['tid'] == $tid) unset($node->rd_f_access_key['und'][$key_node]);
        }
        sort($node->rd_f_access_key['und']);
        node_save($node);
      }
    }

    // Remove Access Keys taxonomy terms
    taxonomy_term_delete($tid);
  }

  drupal_set_message(t('Access Keys deleted correctly'));
}


// *******************************************************************************************
//     VIEWS
// *******************************************************************************************


/**
* Implementation of hook_views_api().
*/
function rd_secretariat_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'rd_secretariat').'/views',
  );
}
