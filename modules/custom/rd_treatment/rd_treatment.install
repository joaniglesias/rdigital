<?php

function rd_treatment_install() {

  $ct_name = 'treatment';
  // create text formats and ckedit profiles
  _create_text_formats($ct_name);
  _create_ckeditor_profiles($ct_name);
  // create new fields and content type
  _create_content_type($ct_name);

}




// *******************************************************************************************
//     TEXT FORMATS AND CKEDITOR PROFILES
// *******************************************************************************************

/**
 * Text Formats definition for Contet Type Treatment
 */
function _get_text_formats_treatment() {

  $text_formats = array();
  $text_formats['treatment'] = array(
    'format' => 'treatment',
    'name' => 'Treatment',
    'weight' => 0,
    'filters' => array(
      // Display any HTML as plain text
      'filter_html_escape' => array(
        'weight' => -10,
        'status' => 1,
      ),
      // Convert line breaks into HTML
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Convert URLs into links
      'filter_url' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 100,
        ),
      ),
    ),
  );

  return $text_formats;

};

/**
 * Get CKEditor Profile definitions for Contet Type Treatment
 *
 * NOTE: to get the profile settings use ckeditor_profile_load() to load all ckeditor profiles
 *       and var_export($my_array) to convert $my_array into php code
 */
function _get_ckeditor_profiles_treatment() {

  $profiles = array();

  $profiles['treatment'] = array(
      'name' => 'Treatment',
      'format' => array(
        'treatment',
        ),
      'settings' => array(
    'ss' => '2',
    'default' => 't',
    'show_toggle' => 'f',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'toolbar' => '[
      [\'Bold\',\'TextColor\',\'BGColor\']
  ]',
    'expand' => 'f',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' =>
    array (
      'custom_formatting_options' =>
      array (
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'theme',
    'css_path' => '',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'ckeditor_load_method' => 'ckeditor.js',
    'ckeditor_load_time_out' => '0',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 'f',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 'f',
    'js_conf' => '',
    'loadPlugins' =>
    array (
      'drupalbreaks' =>
      array (
        'name' => 'drupalbreaks',
        'desc' => 'Plugin for inserting Drupal teaser and page breaks.',
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' =>
        array (
          'DrupalBreak' =>
          array (
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
      'tableresize' =>
      array (
        'name' => 'tableresize',
        'desc' => 'Table Resize plugin',
        'path' => '%editor_path%plugins/tableresize/',
        'buttons' => false,
        'default' => 't',
      ),
    ),
  )
  );

  return $profiles;

}




// *******************************************************************************************
//     CONTENT TYPES, FIELDS AND INSTANCES
// *******************************************************************************************

/**
 * Fields definition for Contet Type Treatment
 */
function _get_fields_treatment() {
  $t = get_t();
  $fields = array();
  $fields['rd_f_treat_related_patient'] = array(
    'field_name' => 'rd_f_treat_related_patient',
    'type' => 'entityreference',
    'label' => $t('Related Patient'),
    'cardinality' => 1,
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(
          'rd_ct_patient' => 'rd_ct_patient',
        ),
      ),
      'target_type' => 'node',
    ),
  );
  $fields['rd_f_treat_related_pract'] = array(
    'field_name' => 'rd_f_treat_related_pract',
    'type' => 'entityreference',
    'label' => $t('Related Practitioner'),
    'cardinality' => 1,
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'user',
    ),
  );
  $fields['rd_f_treat_date_time'] = array(
    'field_name' => 'rd_f_treat_date_time',
    'type' => 'datetime',
    'label' => $t('Treatment Date and time'),
    'cardinality' => 1,
    'module' => 'date',
    'settings' => array(
      'cache_count' => 4,
      'cache_enabled' => 0,
      'granularity' => array(
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'month' => 'month',
        'second' => 0,
        'year' => 'year',
      ),
      'timezone_db' => 'UTC',
      'todate' => '',
      'tz_handling' => 'site',
    ),
  );
  $fields['rd_f_treat_ini_comments'] = array(
    'field_name' => 'rd_f_treat_ini_comments',
    'type' => 'text_long',
    'label' => $t('Initial Comments'),
    'cardinality' => 1,
    'settings' => array(),
  );
  $fields['rd_f_treat_measures'] = array(
    'field_name' => 'rd_f_treat_measures',
    'type' => 'text_long',
    'label' => $t('Measures'),
    'cardinality' => 1,
    'settings' => array(),
  );
  $fields['rd_f_treat_fin_comments'] = array(
    'field_name' => 'rd_f_treat_fin_comments',
    'type' => 'text_long',
    'label' => $t('Final Comments'),
    'cardinality' => 1,
    'settings' => array(),
  );

  return $fields;
}

/**
 * Instances definition for Contet Type Treatment
 */
function _get_instances_treatment() {
  $t = get_t();
  $instances = array(
    'rd_f_treat_related_patient' => array(
      'field_name' => 'rd_f_treat_related_patient',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Related Patient'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'entityreference_autocomplete_tags',
      ),
    ),
    'rd_f_treat_related_pract' => array(
      'field_name' => 'rd_f_treat_related_pract',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Related Practitioner'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'entityreference_autocomplete',
      ),
    ),
    'rd_f_treat_date_time' => array(
      'field_name' => 'rd_f_treat_date_time',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Treatment Date and Time'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'default_value' => 'now',
        'default_value2' => 'same',
        'default_value_code' => '',
        'default_value_code2' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'date',
        'settings' => array(
          'increment' => 1,
          'input_format' => 'd/m/Y - H:i:s',
          'input_format_custom' => '',
          'label_position' => 'above',
          'text_parts' => array(),
          'year_range' => '-1:+1',
        ),
        'type' => 'date_select',
      ),
    ),
    'rd_f_treat_ini_comments' => array(
      'field_name' => 'rd_f_treat_ini_comments',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Initial Comments'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
        'better_formats' => array(
          'allowed_formats_toggle' => 1,
          'allowed_formats' => array(
            'treatment' => 'treatment',
          ),
          'default_order_toggle' => 0,
        ),
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
    'rd_f_treat_measures' => array(
      'field_name' => 'rd_f_treat_measures',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Measures'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
        'better_formats' => array(
          'allowed_formats_toggle' => 1,
          'allowed_formats' => array(
            'treatment' => 'treatment',
          ),
          'default_order_toggle' => 0,
        ),
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
    'rd_f_treat_fin_comments' => array(
      'field_name' => 'rd_f_treat_fin_comments',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_treatment',
      'label' => $t('Final Comments'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
        'better_formats' => array(
          'allowed_formats_toggle' => 1,
          'allowed_formats' => array(
            'treatment' => 'treatment',
          ),
          'default_order_toggle' => 0,
        ),
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
  );

  return $instances;

}

/**
 * Content type Treatment definition
 */
function _get_content_type_treatment() {
  $t = get_t();

  $node = array(
    'type' => 'rd_ct_treatment',
    'name' => $t('Treatment'),
    'base' => 'node_content',
    'description' => $t('Create a new Treatment'),
    'title_label' => $t('Patient Full Name'),
    'custom' => TRUE,
    'promote' => 0,
  );

  return $node;

}

// *******************************************************************************************
//     UPDATE FUNCTIONS
// *******************************************************************************************

// function rd_treatment_update_7000() {

// }
