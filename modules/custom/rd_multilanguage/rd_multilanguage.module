<?php

// *******************************************************************************************
//     BLOCKS
// *******************************************************************************************

/**
 * Implements hook_block_info_alter().
 */
function rd_multilanguage_block_info_alter(&$blocks, $theme, $code_blocks) {
  // enable language selector block in the header
  if (isset($blocks['locale']['language'])) {
      $blocks['locale']['language']['status'] = 1;
      $blocks['locale']['language']['region'] = 'header';
  }
}



// *******************************************************************************************
//     TRANSLATIONS
// *******************************************************************************************

// From https://fosswiki.liip.ch/display/DRUPAL/Script+creation+of+languages+and+import+po+files

/**
 * Add translations from a PO file.
 * This will populate the locales_target table in the database
 * with the strings from the PO file.
 *
 * @param $langcode string (e.g. fr, de, it)
 * @param $poFile string full path to .po file
 * @param $mode const LOCALE_IMPORT_OVERWRITE (overwrite existing translations) or LOCALE_IMPORT_KEEP (only import new strings)
 * @param $group string Text group to import PO file into (eg. 'default' for interface translations)
 * @return bool success
 */
function rd_multilanguage_update_load_language($langcode, $poFile, $mode=LOCALE_IMPORT_OVERWRITE, $group='default') {
  // mimic a drupal uploaded file object, with the necessary info needed by _locale_import_po
  $file = new stdClass;
  $file->uri = $poFile;
  $file->filename = basename($poFile);
  return _locale_import_po($file, $langcode, $mode, $group);
}

/**
 * Find all po files under a given path
 *
 * @param $path string
 * @param $extension string
 * @param $recurse boolean
 * @return array of string paths to po files
 */
function rd_multilanguage_find_files($path, $extension, $recurse=TRUE) {
  $path = rtrim($path, '/') . '/*';
  $pattern = '/\.' . $extension . '$/';
  $files = array();
  foreach (glob ($path) as $fullname) {
    if ($recurse && is_dir($fullname)) {
      $files = array_merge($files, rd_multilanguage_find_files($fullname, $extension, $recurse));
    } else if (preg_match($pattern, $fullname)) {
      $files[] = $fullname;
    }
  }
  return $files;
}

/**
 * Create all the missing or new strings for all text groups
 */
function _create_all_missing_strings() {
  $group_names = module_invoke_all('locale', 'groups');
  module_load_include('inc', 'i18n_string', 'i18n_string.admin');
  foreach ($group_names as $group_name => $group_title) {
    i18n_string_refresh_group($group_name);
  }
}

function rd_mulilanguage_update_all_custom_translations(){

  //Set all vocabularies with the Translation mode option 'Localize'
  _set_localize_translation_all_vocabularies();

  //Create all the missing or new strings for all text groups
  _create_all_missing_strings();

  // Organize all files by language and text_group
  // NOTE: expected name lang_code.text_group.po (i.e: es.fields.po)
  $path = 'profiles/rdigital/modules/custom/rd_multilanguage/translations';
  $files = rd_multilanguage_find_files($path, 'po', TRUE);
  foreach ($files as $fullname) {
    $basename = basename($fullname);
    $file_name_array = explode('.', $basename);
    $lang_code = $file_name_array[0];
    $text_group = $file_name_array[1];
    $po_files[$lang_code][$text_group] = $fullname;
  }

  //update all translations by language
  foreach ($po_files as $language_code => $lang_text_formats) {
    foreach ($lang_text_formats as $text_format => $po_fullname) {
      rd_multilanguage_update_load_language($language_code, $po_fullname, LOCALE_IMPORT_OVERWRITE, $text_format);
    }
  }

  //update all taxonomy translations
  rd_multilanguage_update_all_custom_taxonomy_translations();
}

/**
 * Implements hook_menu().
 */
function rd_multilanguage_menu() {
  $t = get_t();
  $items['admin/config/regional/translate/rd_update'] = array(
    'title' => $t('Recat Digital Update'),
    'description' => $t('Update Recat Digital translations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rd_multilanguage_update_translations_form'),
    'access arguments' => array('translate interface'),
    'weight' => 21,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function rd_multilanguage_update_translations_form($form, &$form_state) {
  $t = get_t();
  $form['form_title'] = array(
    '#markup' => '<h1>' . $t('Update all Recat Digital translations') . '</h1>' . $t('NOTE: All languages and format texts will be translated') . '<p><p>',
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => $t('Update translations'),
  );
  return $form;
}

function rd_multilanguage_update_translations_form_submit($form, &$form_state) {
  rd_mulilanguage_update_all_custom_translations();
}



// *******************************************************************************************
//     TAXONOMY TRANSLATIONS
// *******************************************************************************************


/**
 * Set all vocabularies with the Translation mode option 'Localize'
 */
function _set_localize_translation_all_vocabularies(){
  foreach (taxonomy_get_vocabularies() as $vid => $data){
    $voc = taxonomy_vocabulary_load($vid);
    $voc->i18n_mode = 1;
    taxonomy_vocabulary_save($voc);
  }
}

/**
 * Get an array with all taxonomy terms id and name
 */
function _get_all_taxonomy_terms(){
  foreach (taxonomy_get_vocabularies() as $vid => $data){
    foreach(taxonomy_get_tree($vid) as $key => $term){
      $terms[$term->tid] = $term->name;
    }
  }
  return $terms;
}

/**
 * Get all taxonomy terms names
 * NOTE: used to create the file translations/taxonomy/taxonomy.inc
 */
function _get_all_taxonomy_terms_name(){
  foreach (taxonomy_get_vocabularies() as $vid => $data){
    foreach(taxonomy_get_tree($vid) as $key => $term){
      $terms[$term->name] = '';
    }
  }
  return var_export($terms);
}

/**
 * Create or update the translations for every taxonomy term or vocabulary
 * specified within the taxonomy translation files
 */
function rd_multilanguage_update_all_custom_taxonomy_translations(){

  $terms = _get_all_taxonomy_terms();
  $path = 'profiles/rdigital/modules/custom/rd_multilanguage/translations';
  $taxonomy_translation_files = rd_multilanguage_find_files($path, 'inc', TRUE);

  // create translations for every vocabulary and taxonomy term
  foreach ($taxonomy_translation_files as $fullname) {
    // Parse all translations from files
    // NOTE: expected file name lang_code.taxonomy.inc (i.e: es.taxonomy.inc)
    $basename = basename($fullname);
    $file_name_array = explode('.', $basename);
    $lang_code = $file_name_array[0];
    include_once $fullname;
    $function_name = $lang_code . '_get_taxonomy_translations';
    $translations = $function_name();
    // create translations
    // vocabularies
    foreach (taxonomy_get_vocabularies() as $vid => $voc_data){
      if(isset($translations['vocabularies'][$voc_data->name]) and !empty($translations['vocabularies'][$voc_data->name])){
        _create_taxonomy_translation($vid, $lang_code, 'vocabulary', $translations['vocabularies'][$voc_data->name]);
      }
    }
    // terms
    foreach ($terms as $term_id => $name) {
      if(isset($translations['terms'][$name]) and !empty($translations['terms'][$name])){
        _create_taxonomy_translation($term_id, $lang_code, 'term', $translations['terms'][$name]);
      }
    }
  }
}

/**
 * Create or update a translation string for a vocabulary or a taxonomy term.
 * http://blog.studio.gd/blog/id/17/drupal__how_to_create_and_translate_a_taxonomy_term_programmatically
 *
 * @param $taxonomy_id
 *   The vocabulary id or term id of the taxonomy term.
 * @param $langcode
 *   The langcode for the translation.
 * @param $context_type
 *   'vocabulary' for vocabulary translation and 'term' for taxonomy term translation
 * @param $translation
 *   The translation string.
 */
function _create_taxonomy_translation($taxonomy_id, $langcode, $context_type, $translation) {
  $context = array(
    $context_type,
    $taxonomy_id,
    'name',
  );
  $textgroup = 'taxonomy';
  i18n_string_textgroup($textgroup)->update_translation($context, $langcode, $translation);
}

/**
 * Create or update a locale string and i18n context for the taxonomy term
 * IMP: Code not used - more optimal code found it later
 * @param  [integer] $term_id     taxonomy term id
 * @param  [string] $string_text taxonomy name
 */
function _create_term_string($term_id, $string_text){
  $name = "taxonomy:term:" . $term_id . ":name";
  i18n_string_update($name, $string_text);
}


// *******************************************************************************************
//     INVESTIGATION
//     Functions not used but left here just in case they're needed in the future
// *******************************************************************************************


// KO
function _update_string_translation() {
  //https://gist.github.com/opi/5335785
  $report = array(
    'skips'=>0,
    'updates'=>0,
    'deletes'=>0,
    'additions'=>0
  ); // ??
  $source = "Spain";
  $translation = "EspaNa";
  $textgroup = 'taxonomy'; // field, node, default, menu ...
  $langcode = 'es'; // 'en', 'de'
  $mode = LOCALE_IMPORT_KEEP; // LOCALE_IMPORT_KEEP
  $location = 'taxonomy:term:3:name'; //  'menu:menu:management:title', '/node/3', ...
  $context = 'term:3:name';

  _locale_import_one_string_db($report, $langcode, $context, $source, $translation, $textgroup, $location, $mode);

  // Clear locale cache.
  cache_clear_all('locale:', 'cache', TRUE);


}

//OK
function _yourmodule_profile_create_term_translation() {
  //http://blog.studio.gd/blog/id/17/drupal__how_to_create_and_translate_a_taxonomy_term_programmatically
    $context = array(
    'rd_f_appo_treatment_measures',
    'rd_ct_appointment',
    'label',
  );
  $textgroup = 'field';
  i18n_string_textgroup($textgroup)->update_translation($context, 'es', 'MEDIDAS TRATAMIENTO');

  //others:
  //variable_set('language_content_type_<bundle_name>',TRANSLATION_ENABLED);
  //variable_del('language_content_type_<bundle_name>');
  //locale_language_providers_weight_language
  //language_negotiation_language
}

// Interesting links
// http://blog.studio.gd/blog/id/17/drupal__how_to_create_and_translate_a_taxonomy_term_programmatically

