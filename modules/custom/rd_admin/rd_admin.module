<?php

// *******************************************************************************************
//     TEXT FORMATS AND CKEDITOR PROFILES API
// *******************************************************************************************

/**
 * Create Text Formats
 * @param  [string] $ct_name
 */
function _create_text_formats($ct_name) {

  $function_name = '_get_text_formats_' . $ct_name;
  $text_formats = $function_name();

  if (!empty($text_formats)){
    foreach ($text_formats as $text_format) {
      filter_format_save((object) $text_format);
    }
  }

};

/**
 * Create CKEditor Profiles
 * @param  [string] $ct_name
 */
function _create_ckeditor_profiles($ct_name) {

  $function_name = '_get_ckeditor_profiles_' . $ct_name;
  $profiles = $function_name();

  if (!empty($profiles)){
    // insert ckeditor profiles to the db
    foreach ($profiles as $profile => $profile_config) {
      foreach ($profile_config['format'] as $text_format) {
        db_insert('ckeditor_input_format')->fields(array(
          'name' => $profile_config['name'],
          'format' => $text_format,
        ))->execute();
      }
      db_insert('ckeditor_settings')->fields(array(
        'name' => $profile_config['name'],
        'settings' => serialize($profile_config['settings']),
      ))->execute();
    }
  }
}


// *******************************************************************************************
//     VOCABULARIES
// *******************************************************************************************

/**
 * Create Text Formats
 * @param  [string] $ct_name
 */
function _create_vocabularies($ct_name) {

  $function_name = '_get_vocabularies_' . $ct_name;
  $vocabularies = $function_name();

  foreach($vocabularies as $vocab) {
    _create_vocabulary($vocab);
   }

};

/**
 * Create and optionally populate a vocabulary
 * @param  [array] $vocabulary fields: name, machine_name, module and terms (array)
 */
function _create_vocabulary($vocabulary) {
  // Skip if vocabulary already exists
  if (taxonomy_vocabulary_machine_name_load($vocabulary['machine_name'])) {
    return true;
  }
  taxonomy_vocabulary_save((object) array(
    'name'          => $vocabulary['name'],
    'machine_name'  => $vocabulary['machine_name'],
    'module'        => $vocabulary['module'],
  ));

  $new_vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary['machine_name']);
  return _populate_vocabulary($vocabulary['terms'], $new_vocabulary);
}


/**
 * Populate a vocabulary
 * @param  [array] $terms: an associative array with all terms with multiple hierarchy
 * @param  [object] $vocabulary: The vocabulary object with all of its metadata
 * @param  [int] $parent_term_id - OPTIONAL : Term ID of the parent term. Default value = 0
 */
function _populate_vocabulary($terms, $vocabulary, $parent_term_id = 0) {
  if (isset($vocabulary->vid)){
    $position_term = 0;
    foreach ($terms as $key => $term) {
      if (is_array($term)){
        $new_term = new stdClass();
        $new_term->name = $key;
        $new_term->vid = $vocabulary->vid;
        $new_term->weight = $position_term;
        $new_term->parent = $parent_term_id;
        taxonomy_term_save($new_term);
        _populate_vocabulary($term, $vocabulary, $new_term->tid);
      }
      else {
        $new_term = new stdClass();
        $new_term->name = $term;
        $new_term->vid = $vocabulary->vid;
        $new_term->weight = $key;
        $new_term->parent = $parent_term_id;
        taxonomy_term_save($new_term);
      }
      $position_term++;
    }
    return true;
  }
  else {
    return false;
  }
}


// *******************************************************************************************
//     CONTENT TYPES, FIELDS AND INSTANCES API
// *******************************************************************************************


/**
 * Get Instances definition with widget weight
 * @param  [string] $ct_name
 */
function _get_instances($ct_name) {

  $function_name = '_get_instances_' . $ct_name;
  $instances = $function_name();

  // Create widget weight
  $ins_weight = 0;
  foreach ($instances as $instance => $data) {
    $instances[$instance]['widget']['weight'] = $ins_weight * 5;
    $ins_weight++;
  }

  return $instances;

}

/**
 * Create content type
 * @param  [string] $ct_name
 */
function _create_content_type($ct_name) {

  $function_name = '_get_content_type_' . $ct_name;
  $node = $function_name();

  //check if content type already exists
  if (!node_type_load($node['type'])) {

    // Create fields
    _create_fields($ct_name)

    //Create content type
    $content_type = node_type_set_defaults($node);
    node_type_save($content_type);

    // Create instances for this content type
    _create_instances($ct_name)
  }
  menu_rebuild();
}

/**
 * Create fields for this content type
 * @param  [string] $ct_name
 */
function _create_fields($ct_name) {
  $function_name = '_get_fields_' . $ct_name;
  $fields = $function_name();
  foreach ($fields as $field) {
    field_create_field($field);
  }
}

/**
 * Create instances for this content type
 * @param  [string] $ct_name
 */
function _create_instances($ct_name) {
  foreach (_get_instances($ct_name) as $instance) {
    field_create_instance($instance);
  }
}

// *******************************************************************************************
//     ROLES AND PERMISSIONS
// *******************************************************************************************

/**
 * Create Roles and their Permissions
 * @param  [string] $ct_name
 */
function _create_update_roles_and_permissions($ct_name){

  $function_name = '_get_roles_and_permissions_' . $ct_name;
  $roles = $function_name();
  foreach ($roles as $role_name => $permissions){
    //create role if it doen't exist
    if(!user_role_load_by_name($role_name)){
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
    }
    // create or update permissions
    $role = user_role_load_by_name($role_name);
    user_role_grant_permissions($role->rid, $permissions);
  }
}
