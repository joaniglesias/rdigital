<?php

function rd_appointment_install() {

  // better_formats module config
  variable_set('better_formats_per_field_core', 0);

  // create text formats and ckedit profiles
  _create_text_formats_appointment();
  _create_ckeditor_profiles_appointment();
  // create new fields and content types
  _create_content_type_appointment();

}




// *******************************************************************************************
//     TEXT FORMATS AND CKEDITOR PROFILES
// *******************************************************************************************

/**
 * Create Text Formats for Contet Type appointment
 */
function _create_text_formats_appointment() {

  $text_format = array();
  $text_formats['digital_keyboard'] = array(
    'format' => 'digital_keyboard',
    'name' => 'Digital Keyboard',
    'weight' => 1,
    'filters' => array(
      // Convert line breaks into HTML
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Display any HTML as plain text
      'filter_html_escape' => array(
        'weight' => 1,
        'status' => 1,
      ),
    ),
  );
  $text_formats['treatment'] = array(
    'format' => 'treatment',
    'name' => 'Treatment',
    'weight' => 0,
    'filters' => array(
      // Display any HTML as plain text
      'filter_html_escape' => array(
        'weight' => -10,
        'status' => 1,
      ),
      // Convert line breaks into HTML
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Convert URLs into links
      'filter_url' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 100,
        ),
      ),
    ),
  );

  foreach ($text_formats as $text_format) {
    filter_format_save((object) $text_format);
  }

};

/**
 * Create CKEditor Profiles for Contet Type appointment
 *
 * NOTE: to get the profile settings use ckeditor_profile_load() to load all ckeditor profiles
 *       and var_export($my_array) to convert $my_array into php code
 */
function _create_ckeditor_profiles_appointment() {

  $profiles = array();

  $profiles['treatment'] = array(
      'name' => 'Treatment',
      'format' => array(
        'treatment',
        ),
      'settings' => array(
    'ss' => '2',
    'default' => 't',
    'show_toggle' => 'f',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'toolbar' => '[
      [\'Bold\',\'TextColor\',\'BGColor\']
  ]',
    'expand' => 'f',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' =>
    array (
      'custom_formatting_options' =>
      array (
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'theme',
    'css_path' => '',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'ckeditor_load_method' => 'ckeditor.js',
    'ckeditor_load_time_out' => '0',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 'f',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 'f',
    'js_conf' => '',
    'loadPlugins' =>
    array (
      'drupalbreaks' =>
      array (
        'name' => 'drupalbreaks',
        'desc' => 'Plugin for inserting Drupal teaser and page breaks.',
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' =>
        array (
          'DrupalBreak' =>
          array (
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
      'tableresize' =>
      array (
        'name' => 'tableresize',
        'desc' => 'Table Resize plugin',
        'path' => '%editor_path%plugins/tableresize/',
        'buttons' => false,
        'default' => 't',
      ),
    ),
  )
  );

  // insert ckeditor profiles to the db
  foreach ($profiles as $profile => $profile_config) {
    foreach ($profile_config['format'] as $text_format) {
      db_insert('ckeditor_input_format')->fields(array(
        'name' => $profile_config['name'],
        'format' => $text_format,
      ))->execute();
    }
    db_insert('ckeditor_settings')->fields(array(
      'name' => $profile_config['name'],
      'settings' => serialize($profile_config['settings']),
    ))->execute();
  }

}




// *******************************************************************************************
//     CONTENT TYPES, FIELDS AND INSTANCES
// *******************************************************************************************

/**
 * Fields definition for Contet Type appointment
 */
function _get_fields_appointment() {
  $t = get_t();
  $fields = array();
  $fields['rd_f_appo_telephone'] = array(
    'field_name' => 'rd_f_appo_telephone',
    'type' => 'text',
    'label' => $t('Patient Telephone'),
    'cardinality' => 1,
    'settings' => array(
      'max_length' => 255,
    ),
  );
  $fields['rd_f_appo_related_patient'] = array(
    'field_name' => 'rd_f_appo_related_patient',
    'type' => 'entityreference',
    'label' => $t('Related Patient'),
    'cardinality' => 1,
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(
          'rd_ct_patient' => 'rd_ct_patient',
        ),
      ),
      'target_type' => 'node',
    ),
  );
  $fields['rd_f_appo_date_time'] = array(
    'field_name' => 'rd_f_appo_date_time',
    'type' => 'datetime',
    'label' => $t('Appointment Date and time'),
    'cardinality' => 1,
    'module' => 'date',
    'settings' => array(
      'cache_count' => 4,
      'cache_enabled' => 0,
      'granularity' => array(
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'month' => 'month',
        'second' => 'second',
        'year' => 'year',
      ),
      'timezone_db' => 'UTC',
      'todate' => '',
      'tz_handling' => 'site',
    ),
  );
  $fields['rd_f_appo_temp_keyb_measures'] = array(
    'field_name' => 'rd_f_appo_temp_keyb_measures',
    'type' => 'text_long',
    'label' => $t('Temporary Keyboard Measures'),
    'cardinality' => 1,
    'settings' => array(),
  );
  $fields['rd_f_appo_treatment_measures'] = array(
    'field_name' => 'rd_f_appo_treatment_measures',
    'type' => 'text_long',
    'label' => $t('Treatment Measures'),
    'cardinality' => 1,
    'settings' => array(),
  );
  $fields['rd_f_appo_treatment_comments'] = array(
    'field_name' => 'rd_f_appo_treatment_comments',
    'type' => 'text_long',
    'label' => $t('Treatment Comments'),
    'cardinality' => 1,
    'settings' => array(),
  );

  return $fields;
}

/**
 * Instances definition for Contet Type appointment
 */
function _get_instances_appointment() {
  $t = get_t();
  $instances = array(
    'rd_f_appo_telephone' => array(
      'field_name' => 'rd_f_appo_telephone',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Patient Telephone'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
      ),
    ),
    'rd_f_appo_related_patient' => array(
      'field_name' => 'rd_f_appo_related_patient',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Related Patient'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'entityreference_autocomplete_tags',
        'weight' => 26,
      ),
    ),
    'rd_f_appo_date_time' => array(
      'field_name' => 'rd_f_appo_date_time',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Appointment Date and Time'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'default_value' => 'blank',
        'default_value2' => 'same',
        'default_value_code' => '',
        'default_value_code2' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'date',
        'settings' => array(
          'increment' => 1,
          'input_format' => 'd-m-Y H:i',
          'input_format_custom' => '',
          'label_position' => 'above',
          'text_parts' => array(),
          'year_range' => '-3:+3',
        ),
        'type' => 'date_text',
      ),
    ),
    'rd_f_appo_temp_keyb_measures' => array(
      'field_name' => 'rd_f_appo_temp_keyb_measures',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Temporary Keyboard Measures'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
        'better_formats' => array(
          'allowed_formats_toggle' => 1,
          'allowed_formats' => array(
            'digital_keyboard' => 'digital_keyboard',
            'default_order_toggle' => 0,
          ),
        ),
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
    'rd_f_appo_treatment_measures' => array(
      'field_name' => 'rd_f_appo_treatment_measures',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Treatment Measures'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
    'rd_f_appo_treatment_comments' => array(
      'field_name' => 'rd_f_appo_treatment_comments',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_appointment',
      'label' => $t('Treatment Comments'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
  );

  // Create widget weight
  $ins_weight = 0;
  foreach ($instances as $instance => $data) {
    $instances[$instance]['widget']['weight'] = $ins_weight * 5;
    $ins_weight++;
  }

  return $instances;

}

/**
 * Create content type appointment
 */
function _create_content_type_appointment() {
  $t = get_t();

  //check if content type already exists
  if (!node_type_load('rd_ct_appointment')) {

    // Create fields
    foreach (_get_fields_appointment() as $field_event) {
      field_create_field($field_event);
    }

    //Create content type
    $node = array(
      'type' => 'rd_ct_appointment',
      'name' => $t('Appointment'),
      'base' => 'node_content',
      'description' => $t('Create a new Appointment'),
      'title_label' => $t('Patient Full Name'),
      'custom' => TRUE,
      'promote' => 0,
    );
    $content_type = node_type_set_defaults($node);
    node_type_save($content_type);

    // Create instances for this content type
    foreach (_get_instances_appointment() as $instance) {
      field_create_instance($instance);
    }
  }
  menu_rebuild();
}

// *******************************************************************************************
//     UPDATE FUNCTIONS
// *******************************************************************************************

// function rd_appointment_update_7000() {

// }
