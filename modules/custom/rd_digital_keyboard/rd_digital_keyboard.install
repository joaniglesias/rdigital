<?php

function rd_digital_keyboard_install() {

  $ct_name = 'keyboard_button';

  // create text formats and ckedit profiles
  _create_text_formats($ct_name);
  _create_ckeditor_profiles($ct_name);

  //create vocabularies
  _create_vocabularies($ct_name);

  // create new fields and content types
  _create_content_type($ct_name);

  // create new nodes
  _create_nodes_keyboard_button();

}


// *******************************************************************************************
//     TEXT FORMATS AND CKEDITOR PROFILES
// *******************************************************************************************

/**
 * Text Formats definition for Contet Type Keyboard Button
 */
function _get_text_formats_keyboard_button() {

  $text_formats = array();
  $text_formats['digital_keyboard_button_text'] = array(
    'format' => 'digital_keyboard_button_text',
    'name' => 'Digital Keyboard Button Text',
    'weight' => 2,
    'filters' => array(
      // Convert line breaks into HTML
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Display any HTML as plain text
      'filter_html_escape' => array(
        'weight' => 1,
        'status' => 1,
      ),
    ),
  );

  return $text_formats;

};

/**
 * Get CKEditor Profile definitions for Contet Type Keyboard Button
 *
 * NOTE: to get the profile settings use ckeditor_profile_load() to load all ckeditor profiles
 *       and var_export($my_array) to convert $my_array into php code
 */
function _get_ckeditor_profiles_keyboard_button() {

  $profiles = array();

  $profiles['digital_keyboard_button_text'] = array(
   'name' => 'Digital Keyboard Button Text',
   'format' => array(
     'digital_keyboard_button_text',
     ),
   'settings' =>
  array (
    'ss' => '2',
    'default' => 't',
    'show_toggle' => 't',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'toolbar' => '[
    [\'TextColor\',\'BGColor\'],
    [\'Bold\',\'Italic\'],
    [\'Font\'],
    [\'Undo\',\'Redo\']
]',
    'expand' => 't',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;div;pre;address;h1;h2;h3;h4;h5;h6',
    'custom_formatting' => 'f',
    'formatting' =>
    array (
      'custom_formatting_options' =>
      array (
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'theme',
    'css_path' => '',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'ckeditor_load_method' => 'ckeditor.js',
    'ckeditor_load_time_out' => '0',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 'f',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 'f',
    'js_conf' => '',
    'loadPlugins' =>
    array (
      'drupalbreaks' =>
      array (
        'name' => 'drupalbreaks',
        'desc' => 'Plugin for inserting Drupal teaser and page breaks.',
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' =>
        array (
          'DrupalBreak' =>
          array (
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
      'tableresize' =>
      array (
        'name' => 'tableresize',
        'desc' => 'Table Resize plugin',
        'path' => '%editor_path%plugins/tableresize/',
        'buttons' => false,
        'default' => 't',
      ),
    ),
  ),
   'input_formats' =>
  array (
    'digital_keyboard_button_text' => 'Digital Keyboard Button Text',
  ),
);

  return $profiles;

}


// *******************************************************************************************
//     VOCABULARIES
// *******************************************************************************************

function _get_vocabularies_keyboard_button() {
  $t = get_t();
  $vocabularies['rd_voc_products'] = array(
    'name' => $t('Products'),
    'machine_name' => 'rd_voc_products',
    'module' => 'rd_digital_keyboard',
    'terms' => array( // TO DO: translate them to English and then include Spanish translation
      $t('ACTH'),
      $t('Adrenalina'),
      $t('Alcohol'),
      $t('Azúcar'),
      $t('Café'),
      $t('Citocina'),
      $t('Cocaína'),
      $t('DHEA'),
      $t('Dopamina'),
      $t('Estradiol'),
      $t('Estrógenos'),
      $t('FSH'),
      $t('Glucagon'),
      $t('Grasa'),
      $t('Hachís'),
      $t('Heroína'),
      $t('Histamina'),
      $t('Insulina'),
      $t('LH'),
      $t('LH-RH'),
      $t('LTH'),
      $t('Melatonina'),
      $t('Oxitocina'),
      $t('Premium'),
      $t('Progesterona'),
      $t('Receptores'),
      $t('Serotonina'),
      $t('STH'),
      $t('T3T4'),
      $t('Tabaco'),
      $t('Té Verde'),
      $t('Testosterona'),
      $t('TSH'),
      ),
    );

  $vocabularies['rd_voc_m_filters'] = array(
    'name' => $t('M Filters'),
    'machine_name' => 'rd_voc_m_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'Inf.E', 
      'Elm.E',
      'Elm.C',
      'Elm.T', 
      'Inf.C',
      'Inf.T',                
      'PfS.C',
      'PfS.T', 
      'PfG.C', 
      'PfG.T', 
      'PfG.M', 
      'PfG.A', 
      'PfG.V', 
      'PfG.H',
      ),
    );

  $vocabularies['rd_voc_o_filters'] = array(
    'name' => $t('O Filters'),
    'machine_name' => 'rd_voc_o_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'Elm.M',
      'Elm.A', 
      'Elm.V', 
      'Elm.H',
      ),
    );

  $vocabularies['rd_voc_i_filters'] = array(
    'name' => $t('I Filters'),
    'machine_name' => 'rd_voc_i_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'LUI',
      'LUD',
      'LTG',
      'LTS',
      'MtG',
      'MtS',
      'Ms',
      'MgC', 
      'MgT',
      'MgM',
      'MgA',
      'MgV',
      'MgH',
      ),
    );

  $vocabularies['rd_voc_n_filters'] = array(
    'name' => $t('N Filters'),
    'machine_name' => 'rd_voc_n_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(      
      'Inf.E', 
      'Elm.E',
      'Elm.C',
      'Elm.T', 
      'Elm.M',
      'Elm.A', 
      'Elm.V', 
      'Elm.H',
      'Inf.C',
      'Inf.T',            
      'PfS.C',
      'PfS.T', 
      'PfG.C', 
      'PfG.T', 
      'PfG.M', 
      'PfG.A', 
      'PfG.V', 
      'PfG.H',
      ),
    );

  $vocabularies['rd_voc_ext_filters'] = array(
    'name' => $t('Ext Filters'),
    'machine_name' => 'rd_voc_ext_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'LUI',
      'LUD',
      'LTG',
      'LTS',
      ),
    );

  $vocabularies['rd_voc_int_filters'] = array(
    'name' => $t('Int Filters'),
    'machine_name' => 'rd_voc_int_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'MtG',
      'MtS',
      'Ms',
      'MgC', 
      'MgT',
      'MgM',
      'MgA',
      'MgV',
      'MgH',
      ),
    );

  $vocabularies['rd_voc_obj_filters'] = array(
    'name' => $t('Obj Filters'),
    'machine_name' => 'rd_voc_obj_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'Ms',
      'MgM',
      'MgA',
      'MgV',
      'MgH',
      'Inf.E', 
      'Elm.E',
      'PfS.M-A', 
      'PfS.V-H', 
      'PfG.M', 
      'PfG.A', 
      'PfG.V', 
      'PfG.H',
      ),
    );

  $vocabularies['rd_voc_p_filters'] = array(
    'name' => $t('P Filters'),
    'machine_name' => 'rd_voc_p_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'LUI',
      'LUD',
      'LTG',
      'LTS',
      'Elm.M',
      'Elm.A', 
      'Elm.V', 
      'Elm.H',
      ),
    );

  $vocabularies['rd_voc_sub_filters'] = array(
    'name' => $t('Sub Filters'),
    'machine_name' => 'rd_voc_sub_filters',
    'module' => 'rd_digital_keyboard',
    'terms' => array(
      'MtG',
      'MtS',
      'Ms',
      'MgC', 
      'MgT',
      'Elm.C',
      'Elm.T', 
      'Inf.C',
      'Inf.T',             
      'PfS.C',
      'PfS.T', 
      'PfG.C', 
      'PfG.T', 
      ),
    );

  return $vocabularies;
}


// ALL
// 'LUI',
// 'LUD',
// 'LTG',
// 'LTS',

// 'MtG',
// 'MtS',
// 'Ms',
// 'MgC', 
// 'MgT',
// 'MgM',
// 'MgA',
// 'MgV',
// 'MgH',

// 'Inf.E', 
// 'Elm.E',
// 'Elm.C',
// 'Elm.T', 
// 'Elm.M',
// 'Elm.A', 
// 'Elm.V', 
// 'Elm.H',

// 'Inf.C',
// 'Inf.T', 
// 'PfS.M-A', 
// 'PfS.V-H',               
// 'PfS.C',
// 'PfS.T', 
// 'PfG.C', 
// 'PfG.T', 
// 'PfG.M', 
// 'PfG.A', 
// 'PfG.V', 
// 'PfG.H',




// *******************************************************************************************
//     NODES
// *******************************************************************************************

function _get_nodes_keyboard_button() {

  // ARRAY FORMAT: button_internal_id = array(button_name, button_cover_name, line_break, tab, button_text);
  // NOTE: all fields are mandatory.
  // VALUES: 
       // - button_name: text
       // - button_cover_name: text
       // - line_break: line_break/false
       // - tab: tab/false
       // - button_text: html_code/false

  $nodes = array(
    'WBX' => array('WBX', 'WBX', 'line_break', false, '<p><span style="color:#ff0000;"><strong>WBX</strong></span></p>'),
    'WBX+' => array('WBX+', 'WBX+', 'line_break', false, '<p><span style="color:#ff0000;"><strong>WBX+</strong></span></p>'),
    '/ +' => array('/ +', '/ +', false, 'tab', '<p><span style="color:#800080;"><strong>/ +</strong></span></p>'),
    '/ +++ ' => array('/ +++ ', '/ +++ ', false, 'tab', '<p><span style="color:#800080;"><strong>/ +++</strong></span></p>'),
    'W' => array('W', 'W', 'line_break', false, '<p><span style="color:#ff0000;"><strong>W</strong></span></p>'),
    'B' => array('B', 'B', 'line_break', false, '<p><span style="color:#ff0000;"><strong>B</strong></span></p>'),
    'X' => array('X', 'X', 'line_break', false, '<p><span style="color:#ff0000;"><strong>X</strong></span></p>'),
    'A' => array('A', 'A', false, 'tab', '<p><span style="color:#800080;"><strong>A</strong></span></p>'),
    'T' => array('T', 'T', false, 'tab', '<p><span style="color:#800080;"><strong>T</strong></span></p>'),
    'G' => array('G', 'G', false, 'tab', '<p><span style="color:#800080;"><strong>G</strong></span></p>'),
    'C' => array('C', 'C', false, 'tab', '<p><span style="color:#800080;"><strong>C</strong></span></p>'),
    'Dt' => array('Dt', 'Dt', false, 'tab', '<p>Dt</p>'),
    'Gch' => array('Gch', 'Gch', false, 'tab', '<p>Gch</p>'),
    'Avt' => array('Avt', 'Avt', false, 'tab', '<p>Avt</p>'),
    'Arr' => array('Arr', 'Arr', false, 'tab', '<p>Arr</p>'),
    '16' => array('16', '16', false, 'tab', '<p>16</p>'),
    '75' => array('75', '75', false, 'tab', '<p>75</p>'),
    '55' => array('55', '55', false, 'tab', '<p>55</p>'),
    '70' => array('70', '70', false, 'tab', '<p>70</p>'),
    '//' => array('//', '//', false, 'tab', '<p>// </p>'),
    '⏊' => array('⏊', '⏊', false, 'tab', '<p>⏊ </p>'),
    '---' => array('---', '---', 'line_break', 'tab', '<p>-------------</p>'),
    '(' => array('(', '(', false, 'tab', '<p>(</p>'),
    ')' => array(')', ')', false, 'tab', '<p>)</p>'),
    ',' => array(',', ',', false, 'tab', '<p>,</p>'),
    '/0' => array('/0', '/0', 'line_break', 'tab', '<p>/ &nbsp; 0</p>'),
    'C1D' => array('C1D', 'C1D', false, 'tab', '<p>C1 Dt</p>'),
    'C1G' => array('C1G', 'C1G', false, 'tab', '<p>C1 Gch</p>'),
    '1CoD' => array('1CoD', '1CoD', false, 'tab', '<p>1r Côte Dt</p>'),
    '1CoG' => array('1CoG', '1CoG', false, 'tab', '<p>1r Côte Gch</p>'),
    'Cox' => array('Cox', 'Cox', false, 'tab', '<p>Coxis</p>'),
    'TpeD' => array('TpeD', 'TpeD', false, 'tab', '<p>Tête peroné Dt</p>'),
    'TpeG' => array('TpeG', 'TpeG', false, 'tab', '<p>Tête peroné Gch</p>'),
    '+Med' => array('+Med', '+Med', false, 'tab', '<p>+ Medicaments</p>'),
    '-Med' => array('-Med', '-Med', false, 'tab', '<p>- Medicaments</p>'),
    'id' => array('id', 'id', false, 'tab', '<p>Idem</p>'),
    'mie' => array('mie', 'mie', false, 'tab', '<p>Mieux</p>'),
    'mal' => array('mal', 'mal', false, 'tab', '<p>Mal</p>'),
    'Prod' => array('Prod', 'Prod', false, false, false),
    'M' => array('M', 'M', false, 'tab', '<p>M/</p>'),
    'O' => array('O', 'O', false, 'tab', '<p>O/</p>'),
    'I' => array('I', 'I', false, 'tab', '<p>I/</p>'),
    'N' => array('N', 'N', false, 'tab', '<p>N/</p>'),
    'Ext' => array('Ext', 'Ext', false, 'tab', '<p>Ext/</p>'),
    'Int' => array('Int', 'Int', false, 'tab', '<p>Int/</p>'),
    'Obj' => array('Obj', 'Obj', false, 'tab', '<p>Obj/</p>'),
    'P' => array('P', 'P', false, 'tab', '<p>P/</p>'),
    'Sub' => array('Sub', 'Sub', false, 'tab', '<p>Sub/</p>'),
    'TAB' => array('TAB', 'TAB', false, 'tab', false),
    'ENTER' => array('ENTER', 'ENTER', 'line_break', false, false),
    );

  return $nodes;
}

function _create_nodes_keyboard_button() {

  $nodes_details = _get_nodes_keyboard_button();
  foreach ($nodes_details as $button_internal_id => $button_values) {
    $button_name = $button_values[0];
    $button_cover_name = $button_values[1];
    $line_break = $button_values[2];
    $tab = $button_values[3];
    $button_text = $button_values[4];
    //Create Node
    $button_node = new stdClass();
    $button_node->type = 'rd_ct_keyboard_button';
    $button_node->language = 'en';
    $button_node->status = 1;
    $button_node->promote = 0;
    $button_node->sticky = 0;
    $button_node->title = $button_name;
    $button_node->rd_f_keyb_button_int_id['und'][0]['value'] = $button_internal_id;
    $button_node->rd_f_keyb_button_cover_name['und'][0]['value'] = $button_cover_name;
    if($line_break) $button_node->rd_f_keyb_add_to_text['und'][]['value'] = 'line_break';
    if($tab) $button_node->rd_f_keyb_add_to_text['und'][]['value'] = 'tab';
    if($button_text){
      $button_node->rd_f_keyb_button_text['und'][0]['value'] = $button_text;
      $button_node->rd_f_keyb_button_text['und'][0]['format'] = 'digital_keyboard_button_text';
    }
    node_save($button_node);
  }
}




// *******************************************************************************************
//     CONTENT TYPES, FIELDS AND INSTANCES
// *******************************************************************************************

/**
 * Fields definition for Contet Type Keyboard Buttons
 */
function _get_fields_keyboard_button() {
  $t = get_t();
  $fields = array();

  $fields['rd_f_keyb_button_int_id'] = array(
    'field_name' => 'rd_f_keyb_button_int_id',
    'type' => 'text',
    'label' => $t("Button Internal ID"),
    'cardinality' => 1,
    'settings' => array(
      'max_length' => 255,
    ),
  );

  $fields['rd_f_keyb_button_cover_name'] = array(
    'field_name' => 'rd_f_keyb_button_cover_name',
    'type' => 'text',
    'label' => $t("Button Cover's Name"),
    'cardinality' => 1,
    'settings' => array(
      'max_length' => 255,
    ),
  );
  $fields['rd_f_keyb_add_to_text'] = array(
    'field_name' => 'rd_f_keyb_add_to_text',
    'label' => $t('Add to the text'),
    'cardinality' => -1,
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        'line_break' => $t('Line break'),
        'tab' => $t('Tab'),
      ),
      'allowed_values_function' => '',
    ),
    'type' => 'list_text',
  );
  $fields['rd_f_keyb_button_text'] = array(
    'field_name' => 'rd_f_keyb_button_text',
    'type' => 'text_long',
    'label' => $t('Button Text'),
    'cardinality' => 1,
    'settings' => array(),
  );

  return $fields;
}

/**
 * Instances definition for Contet Type Keyboard Buttons
 */
function _get_instances_keyboard_button() {
  $t = get_t();
  $instances = array(
    'rd_f_keyb_button_int_id' => array(
      'field_name' => 'rd_f_keyb_button_int_id',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_keyboard_button',
      'label' => $t("Button Internal ID"),
      'description' => $t("IMP: this ID needs to be unique"),
      'required' => TRUE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
      ),
    ),
    'rd_f_keyb_button_cover_name' => array(
      'field_name' => 'rd_f_keyb_button_cover_name',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_keyboard_button',
      'label' => $t("Button Cover's Name"),
      'description' => $t("Name that will appear on the button's cover"),
      'required' => TRUE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
      ),
    ),
    'rd_f_keyb_add_to_text' => array(
      'field_name' => 'rd_f_keyb_add_to_text',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_keyboard_button',
      'label' => $t('Add to the text'),
      'description' => '',
      'required' => FALSE,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_buttons',
      ),
    ),
    'rd_f_keyb_button_text' => array(
      'field_name' => 'rd_f_keyb_button_text',
      'entity_type' => 'node',
      'bundle' => 'rd_ct_keyboard_button',
      'label' => $t('Button Text'),
      'description' => $t('Text that will be written after clicking on the button'),
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
        'better_formats' => array(
          'allowed_formats_toggle' => 1,
          'allowed_formats' => array(
            'digital_keyboard_button_text' => 'digital_keyboard_button_text',
          ),
          'default_order_toggle' => 0,
        ),
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 3,
        ),
        'type' => 'text_textarea',
      ),
    ),
  );

  return $instances;

}

/**
 * Content type Keyboard Buttons definition
 */
function _get_content_type_keyboard_button() {
  $t = get_t();

  $node = array(
    'type' => 'rd_ct_keyboard_button',
    'name' => $t('Keyboard Button'),
    'base' => 'node_content',
    'description' => $t('Create a new Keyboard Button'),
    'title_label' => $t('Name'),
    'custom' => TRUE,
    'promote' => 0,
  );

  return $node;

}

// *******************************************************************************************
//     UPDATE FUNCTIONS
// *******************************************************************************************

/**
* Update 7000
* Create field and instance 'Button Internal ID'
*/
function rd_digital_keyboard_update_7000() {
  $fields = _get_fields_keyboard_button();
  $instances = _get_instances_keyboard_button();

  $new_field = $fields['rd_f_keyb_button_int_id'];
  $new_instance = $instances['rd_f_keyb_button_int_id'];
  $new_instance['widget']['weight'] = '-2';

  field_create_field($new_field);
  field_create_instance($new_instance);

  //Field Button Cover's Name mandatory
  $update_instance = $instances['rd_f_keyb_button_cover_name'];
  $update_instance['widget']['weight'] = '0';
  field_update_instance($update_instance);  

  // create new nodes
  _create_nodes_keyboard_button();

  //create new vocabularies
  _create_vocabularies('keyboard_button');
}
